from multiprocessing import Process, Queue

"""
Класс Queue из модуля multiprocessing представляет собой потокобезопасную очередь, которая используется для 
обмена данными между процессами в многопроцессорных приложениях. Он предоставляет удобный способ передачи 
данных между процессами, необходимый для реализации сценариев производителя-потребителя и других многопроцессорных 
паттернов.

Вот основные методы и их описание:

    put(item, [block[, timeout]]): Добавляет элемент item в конец очереди. 
    Если block установлен в True (по умолчанию), операция блокирует выполнение, 
    пока не будет доступно место в очереди. Если timeout указан и операция не может 
    быть завершена в течение указанного времени, возникает исключение queue.Full.

    get([block[, timeout]]): Извлекает и возвращает элемент из начала очереди. 
    Если block установлен в True (по умолчанию), операция блокирует выполнение, 
    пока в очереди не появится элемент. Если timeout указан и операция не может 
    быть завершена в течение указанного времени, возникает исключение queue.Empty.

    qsize(): Возвращает количество элементов в очереди.

    empty(): Возвращает True, если очередь пуста, и False в противном случае.

    full(): Возвращает True, если очередь заполнена, и False в противном случае.
"""


def producer(queue):
    for i in range(5):
        queue.put(i)
        print(f"Произведен элемент {i}")


def consumer(queue):
    while not queue.empty():
        item = queue.get()
        print(f"Потреблен элемент {item}")


if __name__ == "__main__":
    q = Queue()

    # Создаем и запускаем процессы производителя и потребителя
    producer_process = Process(target=producer, args=(q,))
    consumer_process = Process(target=consumer, args=(q,))

    producer_process.start()
    consumer_process.start()

    producer_process.join()
    consumer_process.join()
